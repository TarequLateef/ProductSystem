// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Product.EF;

#nullable disable

namespace Product.EF.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20250525065414_InsertRoles")]
    partial class InsertRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.16");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "Secure");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Secure");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Secure");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Secure");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Secure");
                });

            modelBuilder.Entity("Product.Core.Models.ProdSch.Measurment", b =>
                {
                    b.Property<string>("MeasureID")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasureCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasureName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasureShort")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("PropFullCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("PropID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserLogID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MeasureID");

                    b.HasIndex("MeasureCode")
                        .IsUnique();

                    b.HasIndex("PropID");

                    b.ToTable("MeasureUnitTBL", "Prod");
                });

            modelBuilder.Entity("Product.Core.Models.ProdSch.ProductFullData", b =>
                {
                    b.Property<string>("FullDataID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProdID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PropCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserLogID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.HasKey("FullDataID");

                    b.HasIndex("FullCode")
                        .IsUnique();

                    b.HasIndex("ProdID");

                    b.ToTable("ProductFullDataTBL", "Prod");
                });

            modelBuilder.Entity("Product.Core.Models.ProdSch.Products", b =>
                {
                    b.Property<string>("ProdID")
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProdDesc")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserLogID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProdID");

                    b.HasIndex("BaseCode")
                        .IsUnique();

                    b.HasIndex("ProdName")
                        .IsUnique();

                    b.ToTable("ProductTBL", "Prod");
                });

            modelBuilder.Entity("Product.Core.Models.ProdSch.PropValue", b =>
                {
                    b.Property<string>("PropValID")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PackgeName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProdID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PropID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProprityValue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserLogID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.HasKey("PropValID");

                    b.HasIndex("ProdID");

                    b.HasIndex("PropID");

                    b.HasIndex("ProprityValue")
                        .IsUnique();

                    b.HasIndex("ValCode")
                        .IsUnique();

                    b.ToTable("PropValTBL", "Prod");
                });

            modelBuilder.Entity("Product.Core.Models.ProdSch.Property", b =>
                {
                    b.Property<string>("PropID")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<string>("PropDesc")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PropName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserLogID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PropID");

                    b.HasIndex("PropCode")
                        .IsUnique();

                    b.HasIndex("PropName")
                        .IsUnique();

                    b.ToTable("PropertyTBL", "Prod");
                });

            modelBuilder.Entity("SharedLiberary.Models.UserManagment.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "Secure");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SharedLiberary.Models.UserManagment.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SharedLiberary.Models.UserManagment.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLiberary.Models.UserManagment.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SharedLiberary.Models.UserManagment.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Product.Core.Models.ProdSch.Measurment", b =>
                {
                    b.HasOne("Product.Core.Models.ProdSch.Property", "PropertyTBL")
                        .WithMany()
                        .HasForeignKey("PropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyTBL");
                });

            modelBuilder.Entity("Product.Core.Models.ProdSch.ProductFullData", b =>
                {
                    b.HasOne("Product.Core.Models.ProdSch.Products", "ProductTBL")
                        .WithMany()
                        .HasForeignKey("ProdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductTBL");
                });

            modelBuilder.Entity("Product.Core.Models.ProdSch.PropValue", b =>
                {
                    b.HasOne("Product.Core.Models.ProdSch.Products", "ProductTBL")
                        .WithMany()
                        .HasForeignKey("ProdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product.Core.Models.ProdSch.Property", "PropertyTBL")
                        .WithMany()
                        .HasForeignKey("PropID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductTBL");

                    b.Navigation("PropertyTBL");
                });

            modelBuilder.Entity("SharedLiberary.Models.UserManagment.ApplicationUser", b =>
                {
                    b.OwnsMany("SharedLiberary.Models.UserManagment.RefreshToken", "RefrshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<string>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("Id", "UserId");

                            b1.HasIndex("UserId");

                            b1.ToTable("RefreshTokens", "Secure");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefrshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
